#! /usr/bin/env zsh


sync-pkg() {
	local query="$1"
	local aux="$query" pkg_version=()

	if [[ $query = @* ]]; then
		aux="${aux#@}"
	fi

	pkg_version=("${(@s:@:)aux}")

	if [[ $query = @* ]]; then
		pkg_version[1]="@${pkg_version[1]}"
	fi

	# Match not x.x.x versions
	# if [[ $pkg_version[2] != [[:digit:]]##.[[:digit:]]##.[[:digit:]]## ]]; then
	# 	printf "Searching for dynamic version of %s@%s ...\n" "$pkg_version[1]" "$pkg_version[2]"
	# 	pkg_version[2]=$(
	# 		npm info "${pkg_version[1]}@${pkg_version[2]}" version --json \
	# 			| jq -r 'if type == "array" then .[-1] else . end'
	# 	)
	# 	printf "Found version %s\n" "$pkg_version[2]"
	# fi

	local files=()
	files=("${(@f)$(git ls-files '**/package.json' package.json | xargs rg "$pkg_version[1]" -g package.json -l)}")

	for f in $files; do
		printf "Updating dependency %s on file %s...\n" "$pkg_version[1]" "$f"
		jq '
			.
				| if .dependencies | has($pkg) then .dependencies[$pkg] = $version else . end
				| if .devDependencies | has($pkg) then .devDependencies[$pkg] = $version else . end
				| if .peerDependencies | has($pkg) then .peerDependencies[$pkg] = $version else . end
		' "$f" --arg pkg "$pkg_version[1]" --arg version "$pkg_version[2]" | sponge "$f"
	done
}

for pkg; do
	sync-pkg "$pkg"
done
